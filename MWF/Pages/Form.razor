@*

@page "/Form"

<h3>Characters</h3>

<table class="table">
    <thead>
        <tr>
            <th></th>
            <th>Id</th>
            <th>Name</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var character in donation)
        {
            <tr>
                <td><img src="@character.Image" class="rounded" style="max-height: 100px;" /></td>
                <td>@donation.donationId</td>
                <td>@character.Name</td>
                <td>
                    <button class="btn btn-primary" @onclick="(() => EditCharacter(character.Id))">
                        <i class="oi oi-pencil"></i>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>
<button class="btn btn-primary" @onclick="CreateCharacter">Create New Character</button>

<hr />

<EditForm Model="donation" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <div>
        <label for="id">Id</label>
        <InputNumber id="id" @bind-Value="donation.id" class="form-control"></InputNumber>
        <ValidationMessage For="@(() => donation.don)" />
    </div>
    <div>
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="character.Name" class="form-control"></InputText>
        <ValidationMessage For="@(() => character.Name)" />
    </div>
    <div>
        <label for="bio">Bio</label>
        <InputTextArea id="bio" @bind-Value="character.Bio" class="form-control"></InputTextArea>
    </div>
    <div>
        <label for="birthdate">Birthdate</label>
        <InputDate id="birthdate" @bind-Value="character.BirthDate" class="form-control"></InputDate>
    </div>
    <div>
        <label for="team">Team</label><br />
        <InputRadioGroup id="team" @bind-Value="character.TeamId" class="form-control">
            @foreach (var team in teams)
            {
                <InputRadio Value="@team.Id" />
                <span style="padding-left: 5px;">@team.Name</span>
                <br />
            }
        </InputRadioGroup>
    </div>
    <div>
        <label for="difficulty">Difficulty</label>
        <InputSelect id="difficulty" @bind-Value="character.DifficultyId" class="form-control">
            @foreach (var difficulty in difficulties)
            {
                <option value="@difficulty.Id">@difficulty.Title</option>
            }
        </InputSelect>
    </div>
    <div>
        <InputCheckbox id="readyToFight" @bind-Value="character.IsReadyToFight" class="form-check-input"></InputCheckbox>
        <label for="readyToFight" class="form-check-label">Ready to Fight</label>
    </div>
    <div>
        <img src="@character.Image" class="rounded" style="max-height: 200px;" />
    </div>
    <div>
        <label for="image">Image</label>
        <InputFile OnChange="OnFileChange" class="form-control"></InputFile>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@(isNew ? "Create Character" : "Update Character")</button>
    @if (!isNew)
    {
        <button type="button" class="btn btn-danger" @onclick="DeleteCharacter">Delete Character</button>
    }
    <ValidationSummary />
</EditForm>


<p style="height:500px;"></p>


@code {
    static List<Donor> donors = new List<Donor>
    {
        new Donor { DonorId = 1, Name = "Avengers"},
        new Donor { DonorId = 2, Name = "Justice League"}
    };

    static List<PaymentMode> paymentmodes = new List<PaymentMode>
    {
        new PaymentMode { PaymentModeId = 1, Title = "Easy"},
        new PaymentMode { PaymentModeId = 2, Title = "Normal"},
        new PaymentMode { PaymentModeId = 3, Title = "Hard"},
    };
    static List<DonationType> donationTypes = new List<DonationType>
    {
        new DonationType { DonationTypeId = 1, Title = "Easy"},
        new DonationType { DonationTypeId = 2, Title = "Normal"},
        new DonationType { DonationTypeId = 3, Title = "Hard"},
    };

    static List<Donation> donation = new List<Donation>
    {
        new Donation
        {
            DonationId = 1,
            Rec_No = 12345,
            Rec_Date = new DateTime(2001, 8, 10),
            Donor = "Name",
            Reference = "write reference",
            ChequeNo = 54321,
            Amount = 100,
            Remarks = "Remarks",
            
        }
    };

    Donation character = new Donation();
    bool isNew = true;

    private void EditCharacter(int id)
    {
        var characterToEdit = donation.Find(c => c.DonationId == id);
        if (characterToEdit != null)
        {
            character = characterToEdit;
            isNew = false;
        }
    }

    private void HandleSubmit()
    {
        if (isNew)
        {
            donation.Add(character);
        }
    }

    private void CreateCharacter()
    {
        character = new Donation();
        isNew = true;
    }

    private void DeleteCharacter()
    {
        donation.Remove(character);
    }
    
    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 200, 200);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        character.Image = imageData;
    }
}
*@