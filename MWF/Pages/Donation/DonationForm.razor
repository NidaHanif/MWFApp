@page "/DonationForm"

<h3>Donation Form</h3>

@using System.ComponentModel.DataAnnotations; 
@using MWF.Pages;
@using MWF.Codes;
@using MWF.Models;
@using System;
@using System.Collections.Generic;
@using System.Data;
@using System.Data.SQLite;
@using System.Text;



<EditForm Model="@donation" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row mt-2">
        <div class="col-md-6">
        <label for="Rec_No">Receipt Number</label>
        <InputText id="Rec_No" class="form-control" @bind-Value="donation.Rec_No" />
        </div>
        <div class="col-md-6">
        <label for="Rec_Date">Receipt Date</label>
        <InputDate id="Rec_Date" class="form-control" @bind-Value="donation.Rec_Date" />    
    </div>

        <div class="col-md-6">
            <label for="Email">Email </label>
            <InputText id="Email" class="form-control" @bind-Value="donation.Email" />
            <ValidationMessage For="@(() => donation.Email)" />
        </div>

        <div class="col-md-6">
            <label for="Phone_Number">Phone Number</label>
            <InputText id="Phone_Number" class="form-control" @bind-Value="donation.PhoneNumber" />
        </div>

        <div class="col-md-6">
        <label for="DonationType">Donation Type</label>
        <InputSelect id="DonationType" class="form-control" @bind-Value="donation.DonationType">
            <option value="">-- Select Donation Type --</option>
            <option value="Cash">Food</option>
            <option value="Cash">Masjid Fund</option>
            <option value="Cash">Zakat</option>
            <option value="Cash">Atiyat</option>
            <option value="Cash">Sadaqah</option>
        </InputSelect>
    </div>

        <div class="col-md-6">
        <label for="PaymentMode">Payment Mode</label>
        <InputSelect id="PaymentMode" class="form-control" @bind-Value="donation.PaymentMode">
            <option value="">-- Select Payment Mode --</option>
            <option value="Bank">Bank Transfer</option>
            <option value="Cash">Cash</option>
            <option value="Cheque">Cheque</option>
        </InputSelect>
    </div>
    @if (donation.PaymentMode == "Cheque")
    {
        <div class="form-group">
            <label for="ChequeNo">Cheque Number</label>
            <InputText id="ChequeNo" class="form-control" @bind-Value="donation.ChequeNo" />
            <ValidationMessage For="@(() => donation.ChequeNo)" />
        </div>

        <div class="form-group">
            <label for="ChequeDate">Cheque Date</label>
            <InputDate id="ChequeDate" class="form-control" @bind-Value="donation.ChequeDate" />
            <ValidationMessage For="@(() => donation.ChequeDate)" />
        </div>
    }
    <div class="col-md-6">
        <label for="Currency">Currency</label>
        <InputSelect id="Currency" class="form-control" @bind-Value="donation.Currency">
            <option value="">-- Select Currency --</option>
                <option value="PKR">PKR</option>
                <option value="USD">USD</option>
            <option value="EUR">EUR</option>
            <option value="INR">INR</option>
        </InputSelect>
    </div>

        <div class="col-md-6">
        <label for="Amount">Amount</label>
        <InputNumber id="Amount" class="form-control" @bind-Value="donation.Amount" />
    </div>
        <div class="col-md-6">
            <label for="Reference">Reference</label>
            <InputText id="Reference" class="form-control" @bind-Value="donation.Reference" />
        </div>

        <div class="col-md-4">
            <label for="Remarks">Remarks</label>
        <InputTextArea id="Remarks" class="form-control" @bind-Value="donation.Remarks" />
    </div>
    </div>

    <button type="submit" class="btn btn-primary" onclick="/DonationList" style="text-align:center; margin-bottom: 20px;">Save</button>
    <button type="button" @onclick="SaveDonation" class="btn btn-success">Save Data</button>

</EditForm>

@code {

    private Donation donation = new Donation();
    
    [Inject]
    public DonationList DonationList { get; set; }

    [Inject]
    public DonationService DonationService { get; set; }

    [Inject]
    public NavigationManager Navigation { get; set; }

    private void HandleValidSubmit()
    {
        //DonationService.AddDonation(donation);
        Navigation.NavigateTo("/DonationList");
    }


    public class Donation
    {
        public int DonationId { get; set; }
        public int DonorId { get; set; }
        public int DonationTypeId { get; set; }
        public int CurrencyId { get; set; }
        public int PaymentModeId { get; set; }

        public string Rec_No { get; set; }
        public DateTime Rec_Date { get; set; }
        public string DonorName { get; set; }

        [EmailAddress(ErrorMessage = "Enter a valid Email address.")]
        public string Email { get; set; }

        [Phone(ErrorMessage = "Enter a valid Phone number.")] 
        public string PhoneNumber { get; set; }
        
        public string Reference { get; set; }
        public string DonationType { get; set; }

        [Required(ErrorMessage = "Payment mode is required.")] 
        public string PaymentMode { get; set; }
        
        public string ChequeNo { get; set; }
        public DateTime ChequeDate { get; set; }
        
        public string Currency { get; set; }
        public decimal Amount { get; set; }
        public string Remarks { get; set; }
    }
    private void Model2Row()
    {
        MyRow["DonationID"] = donation.DonationId;
        MyRow["DonorID"] = donation.DonorId;
        MyRow["DonationTypeID"] = donation.DonationTypeId;
        MyRow["CurrencyID"] = donation.CurrencyId;
        MyRow["PaymentModeID"] = donation.PaymentModeId;
        MyRow["Amount"] = donation.Amount;
        MyRow["Rec_Date"] = donation.Rec_Date;
    }
    private DataRow MyRow;
    private string MyMessage;


    private void SaveDonation()
    {
        Model2Row();
        string _TableName = MyRow.Table.TableName;
        long _DonationID = (long)MyRow["DonationID"];
        int _Effected;
        TableClass _Table = new("Donation");
        var _RecDate = ((DateTime)MyRow["Rec_Date"]).ToString("yyyy-MM-dd");

        string _Filter = $"[DonationID]={_DonationID}";
        _Table.MyDataView.RowFilter = _Filter;

        if (_Table.MyDataView.Count == 1)  
        {
            var _Command = new SQLiteCommand(ConnectionClass.GetConnected());
            var _Text = new StringBuilder();
            _Text.Append($"UPDATE [{_TableName}] SET ");
            _Text.Append($"[DonorID]={MyRow["DonorID"]}, ");
            _Text.Append($"[DonationTypeID]={MyRow["DonationTypeID"]}, ");
            _Text.Append($"[CurrencyID]={MyRow["CurrencyID"]}, ");
            _Text.Append($"[PaymentModeID]={MyRow["PaymentModeID"]}, ");
            _Text.Append($"[Amount]={MyRow["Amount"]}, ");
            _Text.Append($"[Rec_Date]='{_RecDate}' ");
            _Text.Append($"WHERE [DonationID]={_DonationID}");

            _Command = new(_Text.ToString(), ConnectionClass.GetConnected());
            _Effected = _Command.ExecuteNonQuery();

            if (_Effected > 0)
            {
                MyMessage = $"{_Effected} Row(s) updated successfully.";
            }
        }
        else
        {
            var _MAXID = (long)_Table.MyDataTable.Compute("MAX(DonationID)", "") + 1;
            var _Command = new SQLiteCommand(ConnectionClass.GetConnected());
            var _Text = new StringBuilder();
            _Text.Append($"INSERT INTO [{_TableName}] (DonationID, DonorID, DonationTypeID, CurrencyID, PaymentModeID, Amount, DonationDate) ");
            _Text.Append($"VALUES ({_MAXID}, {MyRow["DonorID"]}, {MyRow["DonationTypeID"]}, {MyRow["CurrencyID"]}, ");
            _Text.Append($"{MyRow["PaymentModeID"]}, {MyRow["Amount"]}, '{_RecDate}')");

            try
            {
                _Command = new(_Text.ToString(), ConnectionClass.GetConnected());
                _Effected = _Command.ExecuteNonQuery();

                if (_Effected > 0)
                {
                    MyMessage = $"{_Effected} Row(s) inserted successfully.";
                }
            }
            catch (Exception e)
            {
                MyMessage = e.Message;
            }
        }
}

}
