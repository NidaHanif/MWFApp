@page "/DonationForm"
@inject NavigationManager NavManager;

<h3>Donation Form</h3>

@using System.ComponentModel.DataAnnotations;
@using MWF.Pages;
@using MWF.Codes;
@using MWF.Models;
@using System;
@using System.Collections.Generic;
@using System.Data;
@using System.Data.SQLite;
@using System.Text;

@code {

    private Donation donation = new Donation();
    public DonationList DonationList { get; set; } = new();
    public DonationService DonationService { get; set; } = new();
    private DataRow MyRow;
    private string MyMessage;
    private DataTable DonationTable = new DataTable();
    public TableClass tb_donation = new("[Donation]");
    public string TableName = "Donation";
    private string ID = string.Empty;
    public void HandleValidSubmit()
    {
        //DonationService.AddDonation(donation);
        NavManager.NavigateTo("/DonationList");
    }

    public class TableClass
    {
        public string TableName { get; set; }
        public DataView MyDataView { get; set; }
        public DataTable MyDataTable { get; set; }

        public TableClass(string tableName)
        {
            TableName = tableName;
        }

        public DataRow GetRow(string tableName, string id)
        {
            DataRow[] rows = MyDataTable.Select($"ID = '{id}'");
            return rows.FirstOrDefault();
        }
    }
    public DataRow GetRow(string tableName, string id)
    {
        string query = $"SELECT * FROM [vew_Donation] WHERE ID = @ID";
        using (SQLiteCommand cmd = new SQLiteCommand(query, ConnectionClass.GetConnected()))
        {
            cmd.Parameters.AddWithValue("@ID", id);
            using (SQLiteDataAdapter adapter = new SQLiteDataAdapter(cmd))
            {
                DataTable dt = new DataTable();
                adapter.Fill(dt);
                if (dt.Rows.Count > 0)
                {
                    return dt.Rows[0]; 
                }
            }
        }
        return null; 
    }

    protected override void OnInitialized()
    {
        if (ID.Length == 0) { ID = string.Empty; }
        MyRow = tb_donation.GetRow(TableName, ID);
        donation = new();

        if (MyRow != null)
        {
            donation = new Donation()
                    {
                        ID = (int)MyRow["ID"],
                        DonorId = (int)MyRow["DonorId"],
                        DonorName = (string)MyRow["Name"],
                    DonationTypeId = (int)MyRow["DonationTypeID"],
                    Reference = (string)MyRow["Reference"],
                        DonationType = (string)MyRow["DonationType"],
                        PaymentModeId = (int)MyRow["PaymentModeId"],
                        PaymentMode = (string)MyRow["PaymentMode"],
                        ChequeNo = (string)MyRow["ChequeNo"],
                        CurrencyId = (int)MyRow["CurrencyId"],
                        Currency = (string)MyRow["Currency"],
                        Amount = (decimal)MyRow["Amount"],
                        Remarks = (string)MyRow["Remarks"],
                        Email = (string)MyRow["Email"],
                        PhoneNumber = (string)MyRow["Phone Number"],
                        Status = (string)MyRow["Status"],
                        Rec_No = (int)MyRow["Rec_No"],
                        Rec_Date = (DateTime)MyRow["Rec_Date"]

                    };

            }
        }

    private DataTable GetDonation()
    {
        tb_donation = new("Donation");
        tb_donation.MyDataView.RowFilter = $"[ID] = '{donation.ID}'";
        if (tb_donation.MyDataView.Count > 0)
        {
            return tb_donation.MyDataView.ToTable();
        }
        return tb_donation.MyDataTable.Clone();
    }

    private void Model2Row()
    {
    
        MyRow = DonationTable.NewRow();
        MyRow["DonationID"] = donation.ID;
        MyRow["DonorID"] = donation.DonorId;
        MyRow["Name"] = donation.DonorName;
        MyRow["DonationTypeID"] = donation.DonationTypeId;
        MyRow["Reference"] = donation.Reference;
        MyRow["DonationType"] = donation.DonationType;
        MyRow["PaymentModeID"] = donation.PaymentModeId;
        MyRow["PaymentMode"] = donation.PaymentMode;
        MyRow["ChequeNo"] = donation.ChequeNo;
        MyRow["ChequeDate"] = donation.ChequeDate;
        MyRow["CurrencyID"] = donation.CurrencyId;
        MyRow["Currency"] = donation.Currency;
        MyRow["Amount"] = donation.Amount;
        MyRow["Remarks"] = donation.Remarks;
        MyRow["Gmail"] = donation.Email;
        MyRow["Phone Number"] = donation.PhoneNumber;
        MyRow["Status"] = donation.Status;
        MyRow["Rec_No"] = donation.Rec_No;
        MyRow["Rec_Date"] = donation.Rec_Date;
    }



    private void SaveDonation()
    {
        Model2Row();
        string _TableName = MyRow.Table.TableName;
        long _ID = (long)MyRow["ID"];
        int _Effected;
        TableClass _Table = new("Donation");
        var _RecDate = ((DateTime)MyRow["Rec_Date"]).ToString("yyyy-MM-dd");
        var _Amount = ((decimal)MyRow["Amount"]).ToString("###,###,###.##");

        string _Filter = $"[ID]={_ID}";
        _Table.MyDataView.RowFilter = _Filter;

        if (_Table.MyDataView.Count == 1)
        {
            var _Command = new SQLiteCommand(ConnectionClass.GetConnected());
            var _Text = new StringBuilder();
            _Text.Append($"UPDATE [{_TableName}] SET ");
            _Text.Append($"[DonorID]={MyRow["DonorID"]}, ");
            _Text.Append($"[DonationTypeID]={MyRow["DonationTypeID"]}, ");
            _Text.Append($"[CurrencyID]={MyRow["CurrencyID"]}, ");
            _Text.Append($"[PaymentModeID]={MyRow["PaymentModeID"]}, ");
            _Text.Append($"[Amount]={MyRow["Amount"]}, ");
            _Text.Append($"[Rec_Date]='{_RecDate}' ");
            _Text.Append($"WHERE [DonationID]={_ID}");

            _Command = new(_Text.ToString(), ConnectionClass.GetConnected());
            _Effected = _Command.ExecuteNonQuery();

            if (_Effected > 0)
            {
                MyMessage = $"{_Effected} Row(s) updated successfully.";
            }
        }
        else
        {
            var _MAXID = (long)_Table.MyDataTable.Compute("MAX(ID)", "") + 1;
            var _Command = new SQLiteCommand(ConnectionClass.GetConnected());
            var _Text = new StringBuilder();
            _Text.Append($"INSERT INTO [{_TableName}] (ID, DonorID, DonationTypeID, CurrencyID, PaymentModeID, Amount, DonationDate) ");
            _Text.Append($"VALUES ({_MAXID}, {MyRow["DonorID"]}, {MyRow["DonationTypeID"]}, {MyRow["CurrencyID"]}, ");
            _Text.Append($"{MyRow["PaymentModeID"]}, {MyRow["Amount"]}, '{_RecDate}')");

            try
            {
                _Command = new(_Text.ToString(), ConnectionClass.GetConnected());
                _Effected = _Command.ExecuteNonQuery();

                if (_Effected > 0)
                {
                    MyMessage = $"{_Effected} Row(s) inserted successfully.";
                }
            }
            catch (Exception e)
            {
                MyMessage = e.Message;
            }
        }
    }
    private void Submit()
    {
        var a = donation.ID;
    }

    private void Back()
    {
        NavManager.NavigateTo("/DonationList");
    }


}

<EditForm Model="@donation" OnSubmit="Submit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row mt-2">
        <div class="col-md-6">
            <label for="Rec_No">Receipt Number</label>
            <InputNumber id="Rec_No" class="form-control" @bind-Value="donation.Rec_No" />
        </div>
        <div class="col-md-6">
            <label for="Rec_Date">Receipt Date</label>
            <InputDate id="Rec_Date" class="form-control" @bind-Value="donation.Rec_Date" />
        </div>
        <div class="col-md-6">
            <label for="Email">Email </label>
            <InputText id="Email" class="form-control" @bind-Value="donation.Email" />
            <ValidationMessage For="@(() => donation.Email)" />
        </div>

        <div class="col-md-6">
            <label for="Phone_Number">Phone Number</label>
            <InputText id="Phone_Number" class="form-control" @bind-Value="donation.PhoneNumber" />
        </div>

        <div class="col-md-6">
            <label for="DonationType">Donation Type</label>
            <InputSelect id="DonationType" class="form-control" @bind-Value="donation.DonationType">
                <option value="">-- Select Donation Type --</option>
                <option value="Cash">Food</option>
                <option value="Cash">Masjid Fund</option>
                <option value="Cash">Zakat</option>
                <option value="Cash">Atiyat</option>
                <option value="Cash">Sadaqah</option>
            </InputSelect>
        </div>

        <div class="col-md-6">
            <label for="PaymentMode">Payment Mode</label>
            <InputSelect id="PaymentMode" class="form-control" @bind-Value="donation.PaymentMode">
                <option value="">-- Select Payment Mode --</option>
                <option value="Bank">Bank Transfer</option>
                <option value="Cash">Cash</option>
                <option value="Cheque">Cheque</option>
            </InputSelect>
        </div>
        @if (donation.PaymentMode == "Cheque")
        {
            <div class="form-group">
                <label for="ChequeNo">Cheque Number</label>
                <InputText id="ChequeNo" class="form-control" @bind-Value="donation.ChequeNo" />
                <ValidationMessage For="@(() => donation.ChequeNo)" />
            </div>

            <div class="form-group">
                <label for="ChequeDate">Cheque Date</label>
                <InputDate id="ChequeDate" class="form-control" @bind-Value="donation.ChequeDate" />
                <ValidationMessage For="@(() => donation.ChequeDate)" />
            </div>
        }
        <div class="col-md-6">
            <label for="Currency">Currency</label>
            <InputSelect id="Currency" class="form-control" @bind-Value="donation.Currency">
                <option value="">-- Select Currency --</option>
                <option value="PKR">PKR</option>
                <option value="USD">USD</option>
                <option value="EUR">EUR</option>
                <option value="INR">INR</option>
            </InputSelect>
        </div>

        <div class="col-md-6">
            <label for="Amount">Amount</label>
            <InputNumber id="Amount" class="form-control" @bind-Value="donation.Amount" />
        </div>
        <div class="col-md-6">
            <label for="Reference">Reference</label>
            <InputText id="Reference" class="form-control" @bind-Value="donation.Reference" />
        </div>

        <div class="col-md-4">
            <label for="Remarks">Remarks</label>
            <InputTextArea id="Remarks" class="form-control" @bind-Value="donation.Remarks" />
        </div>
    </div>

    <div class="=container">
        <div class="row">
            <div class="col-3">
                <button type="submit" class="btn btn-primary" @onclick="Back" style="text-align:center; margin-bottom: 20px;">Save</button>
            </div>
            <div class="col-3">
                <button type="button" @onclick="SaveDonation" class="btn btn-success">Save Data</button>
            </div>
            <div class="col-3">
                <button type="submit" class="btn btn-primary" @onclick="Submit">Save</button>
            </div>
        </div>
    </div>

</EditForm>


